unit formPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Data.DB, Vcl.ComCtrls, Vcl.Grids,
  Vcl.DBGrids, DBAccess, IBC, MemDS, VirtualTable, JvDialogs, System.Types, System.StrUtils, dxGDIPlusClasses;

type
  TfrmPrincipal = class(TForm)
    Panel1: TPanel;
    Label1: TLabel;
    lblStatus: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    lblQtdeCol: TLabel;
    lblQtdeItens: TLabel;
    btnAbrirCSV: TButton;
    edtTabelaCSV: TEdit;
    edtServer: TLabeledEdit;
    edtBD: TLabeledEdit;
    edtUsuario: TLabeledEdit;
    edtSenha: TLabeledEdit;
    btnAbreBanco: TButton;
    btnLimpar: TButton;
    btnDesconectar: TButton;
    DBGrid1: TDBGrid;
    PageControl1: TPageControl;
    TabSocios: TTabSheet;
    btnMigraSocios: TButton;
    ckSocio_AutoInc: TCheckBox;
    tabEmpresas: TTabSheet;
    btnMigraEmpresas: TButton;
    pEmpresaCod: TLabeledEdit;
    pEmpresaNome: TLabeledEdit;
    pEmpresaEnd: TLabeledEdit;
    pEmpresaCNPJ: TLabeledEdit;
    pEmpresaTel: TLabeledEdit;
    pEmpresaComplemento: TLabeledEdit;
    pEmpresaBairro: TLabeledEdit;
    pEmpresaCidade: TLabeledEdit;
    pEmpresaUF: TLabeledEdit;
    pEmpresaNomeFant: TLabeledEdit;
    pEmpresaGrupo: TLabeledEdit;
    pEmpresaCNAE: TLabeledEdit;
    pEmpresaContato: TLabeledEdit;
    pEmpresaEmail: TLabeledEdit;
    pEmpresaTipo: TLabeledEdit;
    pEmpresaNum: TLabeledEdit;
    pEmpresaCEP: TLabeledEdit;
    qTab: TVirtualTable;
    qTabCod: TIntegerField;
    qTabCampo: TStringField;
    qTabTipo: TStringField;
    dsTab: TDataSource;
    IBCConnection1: TIBCConnection;
    IBCTransaction1: TIBCTransaction;
    JvOpenDialog1: TJvOpenDialog;
    tabDependentes: TTabSheet;
    btnMProd: TButton;
    pDependenteMatricula: TLabeledEdit;
    pDependenteCodigo: TLabeledEdit;
    pDependenteNome: TLabeledEdit;
    pDependenteSexo: TLabeledEdit;
    pDependenteParentesco: TLabeledEdit;
    pDependenteRG: TLabeledEdit;
    pDependenteCPF: TLabeledEdit;
    pSocioMatricula: TLabeledEdit;
    pSocioNome: TLabeledEdit;
    pSocioTelefones: TLabeledEdit;
    pSociosNascimento: TLabeledEdit;
    pSocioProfissao: TLabeledEdit;
    pSocioCTPSN: TLabeledEdit;
    pSocioCTPSS: TLabeledEdit;
    pSocioEndereco: TLabeledEdit;
    pSocioNumero: TLabeledEdit;
    pSocioBairro: TLabeledEdit;
    pSocioEmpAtual: TLabeledEdit;
    pSocioCidade: TLabeledEdit;
    pSocioSexo: TLabeledEdit;
    pSocioRG: TLabeledEdit;
    pSocioCPF: TLabeledEdit;
    pSocioComplemento: TLabeledEdit;
    pSocioUF: TLabeledEdit;
    pSocioCEP: TLabeledEdit;
    pSocioEmail: TLabeledEdit;
    pSocioNatural: TLabeledEdit;
    pSocioSalario: TLabeledEdit;
    pSocioPIS: TLabeledEdit;
    pSocioEstado: TLabeledEdit;
    qScript: TIBCSQL;
    ckMostraSenha: TCheckBox;
    Label2: TLabel;
    PnProgresso: TPanel;
    lblexec: TLabel;
    PbProgresso: TProgressBar;
    qSQL: TIBCQuery;
    pEmpresaDescCNAE: TLabeledEdit;
    pEmpresaQtdeFunc: TLabeledEdit;
    GroupBox1: TGroupBox;
    pEmpresaCobEnd: TLabeledEdit;
    pEmpresaCobNum: TLabeledEdit;
    pEmpresaCobComp: TLabeledEdit;
    pEmpresaCobBairro: TLabeledEdit;
    pEmpresaCobCidade: TLabeledEdit;
    pEmpresaCobUF: TLabeledEdit;
    pEmpresaCobEndCEP: TLabeledEdit;
    sSocio: TIBCQuery;
    sSocioMATRICULA: TIntegerField;
    sSocioNOME: TStringField;
    sSocioENDERECO: TStringField;
    sSocioBAIRRO: TStringField;
    sSocioCIDADE: TStringField;
    sSocioCOMPLEMENTO: TStringField;
    sSocioUF: TStringField;
    sSocioCEP: TStringField;
    sSocioNATURALDE: TStringField;
    sSocioESTADOCIVIL: TStringField;
    sSocioTELEFONES: TStringField;
    sSocioNASCIMENTO: TDateField;
    sSocioPROFISSAO: TStringField;
    sSocioCTPSN: TStringField;
    sSocioCTPSS: TStringField;
    sSocioEMPRESAATUAL: TIntegerField;
    sSocioSEXO: TStringField;
    sSocioRG: TStringField;
    sSocioCPF: TStringField;
    sSocioEMAIL: TStringField;
    sSocioSALARIO: TFloatField;
    sSocioPIS: TStringField;
    TabSheet1: TTabSheet;
    memSQL: TMemo;
    btnSQL_Limpar: TButton;
    btnSQL_Execute: TButton;
    tabErros: TTabSheet;
    memErros: TMemo;
    Image1: TImage;
    sEmpresas: TIBCQuery;
    sEmpresasCODIGO: TIntegerField;
    sEmpresasNOME: TStringField;
    sEmpresasAPELIDO: TStringField;
    sEmpresasGRUPO: TStringField;
    sEmpresasENDERECO: TStringField;
    sEmpresasBAIRRO: TStringField;
    sEmpresasNUMERO: TStringField;
    sEmpresasCOMPLEMENTO: TStringField;
    sEmpresasCIDADE: TStringField;
    sEmpresasCEP: TStringField;
    sEmpresasUF: TStringField;
    sEmpresasCNPJ: TStringField;
    sEmpresasTELEFONES: TStringField;
    sEmpresasCNAE: TStringField;
    sEmpresasCONTATO: TStringField;
    sEmpresasEMAIL: TStringField;
    sEmpresasDESCCNAE: TStringField;
    sEmpresasQTDEFUNC: TIntegerField;
    sEmpresasTIPO: TStringField;
    sEmpresasCOB_END: TStringField;
    sEmpresasCOB_BAIRRO: TStringField;
    sEmpresasCOB_COMPLEMENTO: TStringField;
    sEmpresasCOB_CEP: TStringField;
    sEmpresasCOB_CIDADE: TStringField;
    sEmpresasCOB_UF: TStringField;
    sEmpresasCOB_NUMERO: TStringField;
    ckEmpresa_AutoInc: TCheckBox;
    sDependentes: TIBCQuery;
    sDependentesMATRICULA: TIntegerField;
    sDependentesCODIGO: TIntegerField;
    sDependentesNOME: TStringField;
    sDependentesSEXO: TStringField;
    sDependentesPARENTESCO: TStringField;
    sDependentesRG: TStringField;
    sDependentesCPF: TStringField;
    ckDependentes_AutoInc: TCheckBox;
    sSocioCODSEDE: TIntegerField;
    pSocioCodSede: TLabeledEdit;
    btnLimparErros: TButton;
    ckDependenteMat_AutoInc: TCheckBox;
    sSocioNUMERO: TStringField;
    pSocioMae: TLabeledEdit;
    pSocioPai: TLabeledEdit;
    tabHomologacao: TTabSheet;
    Button1: TButton;
    ckHomologacao_AutoInc: TCheckBox;
    pHomologacaoCodInt: TLabeledEdit;
    pHomologacaoData: TLabeledEdit;
    pHomologacaoHora: TLabeledEdit;
    pHomologacaoCodSocio: TLabeledEdit;
    pHomologacaoDataAdm: TLabeledEdit;
    pHomologacaoDataDemis: TLabeledEdit;
    pHomologacaoUltSal: TLabeledEdit;
    pHomologacaoNome: TLabeledEdit;
    pHomologacaoSexo: TLabeledEdit;
    pHomologacaoCidade: TLabeledEdit;
    pHomologacaoCodSede: TLabeledEdit;
    sHomologacao: TIBCQuery;
    sSocioMAE: TStringField;
    sSocioPAI: TStringField;
    pEmpresaSede: TLabeledEdit;
    sEmpresasCODSEDE: TIntegerField;
    sDependentesCODSEDE: TIntegerField;
    pDependenteSede: TLabeledEdit;
    sHomologacaoCODSOCIO: TIntegerField;
    sHomologacaoNOME: TStringField;
    sHomologacaoDATANASC: TDateField;
    sHomologacaoSEXO: TStringField;
    sHomologacaoCIDADE: TStringField;
    sHomologacaoCODHOMOLOGADOR: TIntegerField;
    sHomologacaoDATAADMISSAO: TDateField;
    sHomologacaoDATADEMISSAO: TDateField;
    sHomologacaoCODEMPRESA: TIntegerField;
    sHomologacaoULTIMOSALARIO: TFloatField;
    sHomologacaoOBSERVACAO: TStringField;
    sHomologacaoDATA: TDateField;
    sHomologacaoHORA: TTimeField;
    sHomologacaoOBSERVACOES_EMPRESA: TStringField;
    sHomologacaoOBSERVACOES_PUBLICAS: TStringField;
    sHomologacaoCODINT: TIntegerField;
    sHomologacaoCODSEDE: TIntegerField;
    pHomologacaoDataNasc: TLabeledEdit;
    pHomologacaoCodHomo: TLabeledEdit;
    pHomologacaoCodEmp: TLabeledEdit;
    pHomologacaoObs: TLabeledEdit;
    pHomologacaoObsEmp: TLabeledEdit;
    pHomologacaoObsPub: TLabeledEdit;
    procedure btnAbreBancoClick(Sender: TObject);
    procedure IBCConnection1AfterConnect(Sender: TObject);
    procedure IBCConnection1AfterDisconnect(Sender: TObject);
    procedure btnDesconectarClick(Sender: TObject);
    procedure ckMostraSenhaClick(Sender: TObject);
    procedure btnAbrirCSVClick(Sender: TObject);
    procedure btnLimparClick(Sender: TObject);
    procedure btnMigraSociosClick(Sender: TObject);
    procedure btnMigraEmpresasClick(Sender: TObject);
    procedure btnMProdClick(Sender: TObject);
    procedure btnSQL_ExecuteClick(Sender: TObject);
    procedure btnSQL_LimparClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edtServerClick(Sender: TObject);
    procedure edtBDClick(Sender: TObject);
    procedure edtUsuarioClick(Sender: TObject);
    procedure edtSenhaClick(Sender: TObject);
    procedure btnLimparErrosClick(Sender: TObject);
    procedure ckSocio_AutoIncClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure sSocioAfterPost(DataSet: TDataSet);
    procedure sEmpresasAfterPost(DataSet: TDataSet);
    procedure sDependentesAfterPost(DataSet: TDataSet);
    procedure ckEmpresa_AutoIncClick(Sender: TObject);
    procedure ckDependenteMat_AutoIncClick(Sender: TObject);
    procedure ckDependentes_AutoIncClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure hhfhf(Sender: TObject);
  private
     sTabela : TStringList;
     aFields : TStringDynArray;
     procedure ImportaCampo(Tabela : TIBCQuery; Edit : TLabeledEdit; Campo : String; Edit2 : TLabeledEdit = nil);
    procedure IniciaProc;
    procedure FimProc;
    procedure IncErros(Linha, Codigo, Descricao, Erro: String);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

{$R *.dfm}

procedure TfrmPrincipal.btnAbreBancoClick(Sender: TObject);
begin
   if edtServer.Text = '' then
      begin
         Application.MessageBox('Server em branco!', 'Atenção', MB_ICONERROR);
         edtServer.SetFocus;
         Exit;
      end;

   if edtBD.Text = '' then
      begin
         Application.MessageBox('Selecione um banco de dados!', 'Atenção', MB_ICONERROR);
         edtBD.SetFocus;
         Exit;
      end;

   if (edtUsuario.Text = '') or (edtSenha.Text = '')then
      begin
         Application.MessageBox('Faça o login com usuário e senha!', 'Atenção', MB_ICONERROR);
         edtUsuario.SetFocus;
         Exit;
      end;

   if IBCConnection1.Connected then
      IBCConnection1.Connected := False;
      
   try
      IBCConnection1.Close;
      IBCConnection1.Server := edtServer.Text;
      IBCConnection1.Database := edtBD.Text;
      IBCConnection1.Username := edtUsuario.Text;
      IBCConnection1.Password := edtSenha.Text;
      IBCConnection1.Open;

      Application.MessageBox('Conexão realizada com sucesso!', 'Conexão', MB_ICONINFORMATION + MB_OK);

      btnAbrirCSV.SetFocus;
   Except
      raise Exception.Create('Erro na conexão com o banco de dados!');
   end;

end;

procedure TfrmPrincipal.btnDesconectarClick(Sender: TObject);
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('O Banco de Dados não está conectado!');

   IBCConnection1.Close;
   Application.MessageBox('Banco de Dados desconectado!', 'Conexão', MB_ICONINFORMATION + MB_OK);
end;

procedure TfrmPrincipal.btnLimparClick(Sender: TObject);
begin
   if qTab.IsEmpty then
      raise Exception.Create('Tabela vazia. Selecione um CSV!');
      
   qTab.Close;
   edtTabelaCSV.Clear;
   FreeAndNil(sTabela);
   lblQtdeCol.Caption := '0';
   lblQtdeItens.Caption := '0';
end;

procedure TfrmPrincipal.btnLimparErrosClick(Sender: TObject);
begin
   memErros.Clear;
   tabErros.Caption := 'Erros';
end;

procedure TfrmPrincipal.btnMigraEmpresasClick(Sender: TObject);
var
   i,x : Integer;
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('Migrador não está conectado ao banco de dados!');

   if qTab.IsEmpty then
      raise Exception.Create('Tabela vazia. Selecione um CSV!');

   sEmpresas.Open;

   IniciaProc;

   for I := 1 to sTabela.Count-1 do
      Begin
         PbProgresso.Position := i;
         aFields := SplitString(sTabela[i], ';');
         x := 1;
         try
            sEmpresas.Append;

            if ckEmpresa_AutoInc.Checked then
               sEmpresasCODIGO.AsInteger := i
               else
                  ImportaCampo(sEmpresas,pEmpresaCod,'CODIGO');

            if x > 0 then
               Begin
                  // Linha 1
                  sEmpresasCODSEDE.AsInteger := StrToInt(pEmpresaSede.Text);
                  ImportaCampo(sEmpresas,pEmpresaNome,'NOME');
                  ImportaCampo(sEmpresas,pEmpresaNomeFant,'APELIDO');
                  ImportaCampo(sEmpresas,pEmpresaGrupo,'GRUPO');
                  ImportaCampo(sEmpresas,pEmpresaCNPJ,'CNPJ');
                  ImportaCampo(sEmpresas,pEmpresaCNAE,'CNAE');
                  ImportaCampo(sEmpresas,pEmpresaDescCNAE,'DESCCNAE');
                  ImportaCampo(sEmpresas,pEmpresaQtdeFunc,'QTDEFUNC');
                  ImportaCampo(sEmpresas,pEmpresaTipo,'TIPO');

                  // Linha 2
                  ImportaCampo(sEmpresas,pEmpresaEnd,'ENDERECO');
                  ImportaCampo(sEmpresas,pEmpresaNum,'NUMERO');
                  ImportaCampo(sEmpresas,pEmpresaComplemento,'COMPLEMENTO');
                  ImportaCampo(sEmpresas,pEmpresaBairro,'BAIRRO');
                  ImportaCampo(sEmpresas,pEmpresaCidade,'CIDADE');
                  ImportaCampo(sEmpresas,pEmpresaUF,'UF');
                  ImportaCampo(sEmpresas,pEmpresaCEP,'CEP');
                  ImportaCampo(sEmpresas,pEmpresaTel,'TELEFONES');
                  ImportaCampo(sEmpresas,pEmpresaContato,'CONTATO');
                  ImportaCampo(sEmpresas,pEmpresaEmail,'EMAIL');

                  // Endereço de Cobrança
                  ImportaCampo(sEmpresas,pEmpresaCobEnd,'COB_END');
                  ImportaCampo(sEmpresas,pEmpresaCobNum,'COB_NUM');
                  ImportaCampo(sEmpresas,pEmpresaCobComp,'COB_COMPLEMENTO');
                  ImportaCampo(sEmpresas,pEmpresaCobBairro,'COB_BAIRRO');
                  ImportaCampo(sEmpresas,pEmpresaCobCidade,'COB_CIDADE');
                  ImportaCampo(sEmpresas,pEmpresaCobUF,'COB_UF');
                  ImportaCampo(sEmpresas,pEmpresaCobEndCEP,'COB_CEP');

                  sEmpresas.Post;
               End;
         Except
            on E: Exception do
            Begin
               if pEmpresaNome.Text = '' then
                  incErros(i.ToString,aFields[StrToInt(sEmpresasCODIGO.Text)],'',e.Message)
               else
                  incErros(i.ToString,aFields[StrToInt(sEmpresasCODIGO.Text)],aFields[StrToInt(pEmpresaNome.Text)],e.Message);
               sEmpresas.Cancel;
            End;
         end;
      End;

   IBCTransaction1.CommitRetaining;
   sEmpresas.Close;

   FimProc;
end;

procedure TfrmPrincipal.btnMigraSociosClick(Sender: TObject);
var
   i,x,QtdeReg : Integer;
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('Migrador não está conectado ao banco de dados!');

   if qTab.IsEmpty then
      raise Exception.Create('Tabela vazia. Selecione um CSV!');

   sSocio.Open;

   IniciaProc;

   for I := 1 to sTabela.Count-1 do
      Begin
         PbProgresso.Position := i;
         aFields := SplitString(sTabela[i], ';');
         x := 1;
         try
            sSocio.Append;

            if ckHomologacao_AutoInc.Checked then
               sSocioMATRICULA.AsInteger := i
               else
                  ImportaCampo(sSocio,pSocioMatricula,'MATRICULA');

            if x > 0 then
               Begin
                  // Linha 1
//                  ImportaCampo(sSocio,pSocioCodSede,pSocioCodSede.Text);
                  sSocioCODSEDE.AsInteger := StrToInt(pSocioCodSede.Text);
                  ImportaCampo(sSocio,pSocioNome,'NOME');
                  ImportaCampo(sSocio,pSocioEndereco,'ENDERECO');
                  ImportaCampo(sSocio,pSocioNumero,'NUMERO');
                  ImportaCampo(sSocio,pSocioBairro,'BAIRRO');
                  ImportaCampo(sSocio,pSocioCidade,'CIDADE');
                  ImportaCampo(sSocio,pSocioComplemento,'COMPLEMENTO');
                  ImportaCampo(sSocio,pSocioUF,'UF');
                  ImportaCampo(sSocio,pSocioCEP,'CEP');
                  ImportaCampo(sSocio,pSocioNatural,'NATURALDE');
                  ImportaCampo(sSocio,pSocioEstado,'ESTADOCIVIL');

                  // Linha 2
                  ImportaCampo(sSocio,pSocioTelefones,'TELEFONES');
                  ImportaCampo(sSocio,pSociosNascimento,'NASCIMENTO');
                  ImportaCampo(sSocio,pSocioProfissao,'PROFISSAO');
                  ImportaCampo(sSocio,pSocioCTPSN,'CTPSN');
                  ImportaCampo(sSocio,pSocioCTPSS,'CTPSS');
                  ImportaCampo(sSocio,pSocioEmpAtual,'EMPRESAATUAL');
                  ImportaCampo(sSocio,pSocioSexo,'SEXO');
                  ImportaCampo(sSocio,pSocioRG,'RG');
                  ImportaCampo(sSocio,pSocioCPF,'CPF');
                  ImportaCampo(sSocio,pSocioEmail,'EMAIL');
                  ImportaCampo(sSocio,pSocioSalario,'SALARIO');
                  ImportaCampo(sSocio,pSocioPIS,'PIS');

                  // Linha 3
                  ImportaCampo(sSocio,pSocioMae,'MAE');
                  ImportaCampo(sSocio,pSocioPai,'PAI');

                  sSocio.Post;
               End;
         Except
            on E: Exception do
            Begin
               if pSocioNome.Text = '' then
                  incErros(i.ToString,aFields[StrToInt(sSocioMATRICULA.Text)],'',e.Message)
               else
                  incErros(i.ToString,aFields[StrToInt(sSocioMATRICULA.Text)],aFields[StrToInt(pSocioNome.Text)],e.Message);
               sSocio.Cancel;

               FimProc;
            End;
         end;
      End;

   IBCTransaction1.CommitRetaining;
   sSocio.Close;

   FimProc;
end;

procedure TfrmPrincipal.btnMProdClick(Sender: TObject);
var
   i,x : Integer;
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('Migrador não está conectado ao banco de dados!');

   if qTab.IsEmpty then
      raise Exception.Create('Tabela vazia. Selecione um CSV!');

   sDependentes.Open;
      
   IniciaProc;

   for I := 1 to sTabela.Count-1 do
      Begin
         PbProgresso.Position := i;
         aFields := SplitString(sTabela[i], ';');
         x := 1;
         try
            sDependentes.Append;

            if ckDependentes_AutoInc.Checked then
               sDependentesCODIGO.AsInteger := i
               else
                  ImportaCampo(sDependentes,pDependenteCodigo,'CODIGO');

            if ckDependenteMat_AutoInc.Checked then
               sDependentesMATRICULA.AsInteger := i
               else
                  ImportaCampo(sDependentes,pDependenteMatricula,'MATRICULA');

            if x > 0 then
               Begin
                  sDependentesCODSEDE.AsInteger := StrToInt(pDependenteSede.Text);
                  ImportaCampo(sDependentes,pDependenteNome,'NOME');
                  ImportaCampo(sDependentes,pDependenteSexo,'SEXO');
                  ImportaCampo(sDependentes,pDependenteParentesco,'PARENTESCO');
                  ImportaCampo(sDependentes,pDependenteRG,'RG');
                  ImportaCampo(sDependentes,pDependenteCPF,'CPF');

                  sDependentes.Post;
               End;
         Except
            on E: Exception do
            Begin
               if pDependenteNome.Text = '' then
                  incErros(i.ToString,aFields[StrToInt(sDependentesCODIGO.Text)],'',e.Message)
               else
                  incErros(i.ToString,aFields[StrToInt(sDependentesCODIGO.Text)],aFields[StrToInt(pDependenteNome.Text)],e.Message);
               sDependentes.Cancel;
            End;
         end;
      End;

   IBCTransaction1.CommitRetaining;
   sDependentes.Close;

   FimProc;

end;

procedure TfrmPrincipal.btnSQL_ExecuteClick(Sender: TObject);
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('Migrador não está conectado ao banco de dados!');
   
   if memSQL.Text = '' then
      begin
         Application.MessageBox('Nenhum comando localizado!', 'Erro', MB_ICONERROR);
         memSQL.SetFocus;
         Exit;
      end;

   qScript.SQL.Clear;
   qScript.SQL.Text := memSQL.Text;
   qScript.Execute;
end;

procedure TfrmPrincipal.btnSQL_LimparClick(Sender: TObject);
begin
   memSQL.Lines.Clear;
end;

procedure TfrmPrincipal.hhfhf(Sender: TObject);
var
   i,x : Integer;
begin
   if IBCConnection1.Connected = False then
      raise Exception.Create('Migrador não está conectado ao banco de dados!');

   if qTab.IsEmpty then
      raise Exception.Create('Tabela vazia. Selecione um CSV!');

   sHomologacao.Open;

   IniciaProc;

   for I := 1 to sTabela.Count-1 do
      Begin
         PbProgresso.Position := i;
         aFields := SplitString(sTabela[i], ';');
         x := 1;
         try
            sHomologacao.Append;

            if ckHomologacao_AutoInc.Checked then
               sHomologacaoCODINT.AsInteger := i
               else
                  ImportaCampo(sHomologacao,pHomologacaoCodInt,'CODINT');]

            if x > 0 then
               Begin
                  // Linha 1
                  sHomologacaoCODSEDE.AsInteger := StrToInt(pHomologacaoCodSede.Text);
                  ImportaCampo(sHomologacao,pHomologacaoCodHomo,'CODHOMOLOGADOR');
                  ImportaCampo(sHomologacao,pHomologacaoCodEmp,'CODEMPRESA');
                  ImportaCampo(sHomologacao,pHomologacaoDataNasc,'DATANASC');
                  ImportaCampo(sHomologacao,pHomologacaoCodSocio,'CODSOCIO');
                  ImportaCampo(sHomologacao,pHomologacaoDataAdm,'DATAADMISSAO');
                  ImportaCampo(sHomologacao,pHomologacaoDataEmis,'DATADEMISSAO');
                  ImportaCampo(sHomologacao,pHomologacaoUltSal,'ULTIMOSALARIO');
                  ImportaCampo(sHomologacao,pHomologacaoNome,'NOME');
                  ImportaCampo(sHomologacao,pHomologacaoSexo,'SEXO');

                  // Linha 2
                  ImportaCampo(sHomologacao,pHomologacaoCidade,'CIDADE');
                  ImportaCampo(sHomologacao,pHomologacaoData,'DATA');
                  ImportaCampo(sHomologacao,pHomologacaoHora,'HORA');
                  ImportaCampo(sHomologacao,pHomologacaoObs,'OBSERVACAO');
                  ImportaCampo(sHomologacao,pHomologacaoObsEmp,'OBSERVACOES_EMPRESA');
                  ImportaCampo(sHomologacao,pHomologacaoObsPub,'OBSERVACOES_PUBLICAS');

                  sSocio.Post;
               End;
         Except
            on E: Exception do
            Begin
               if pHomologacaoNome.Text = '' then
                  incErros(i.ToString,aFields[StrToInt(sHomologacaoCODINT.Text)],'',e.Message)
               else
                  incErros(i.ToString,aFields[StrToInt(sHomologacaoCODINT.Text)],aFields[StrToInt(pHomologacaoNome.Text)],e.Message);
               sHomologacao.Cancel;

               FimProc;
            End;
         end;
      End;

   IBCTransaction1.CommitRetaining;
   sHomologacao.Close;

   FimProc;
end;

procedure TfrmPrincipal.btnAbrirCSVClick(Sender: TObject);
var
   i,x : Integer;

begin
   if JvOpenDialog1.Execute then
      begin
         edtTabelaCSV.Text := JvOpenDialog1.FileName;

         if not Assigned(sTabela) then
            sTabela := TStringList.Create;

         sTabela.LoadFromFile(edtTabelaCSV.Text);
         aFields := SplitString(sTabela[0], ';');

         qTab.Close;
         qTab.Clear;
         qTab.Open;

         x := 0;
         for i := 0 to Length(aFields)-1 do
            Begin
                qTab.Append;
                qTab.Edit;
                qTabCod.AsInteger := x;
                qTabCampo.AsString := aFields[i];
                qTab.Post;

                inc(x);
            End;

         qTab.First;

         lblQtdeCol.Caption := qTab.RecordCount.ToString;
         lblQtdeItens.Caption := IntToStr(sTabela.Count-1);

      end;
end;

procedure TfrmPrincipal.ckDependenteMat_AutoIncClick(Sender: TObject);
begin
   if ckDependenteMat_AutoInc.Checked then
      pDependenteMatricula.Enabled := False
      else
         pDependenteMatricula.Enabled := True;
end;

procedure TfrmPrincipal.ckDependentes_AutoIncClick(Sender: TObject);
begin
   if ckDependentes_AutoInc.Checked then
      pDependenteCodigo.Enabled := False
      else
         pDependenteCodigo.Enabled := True;
end;

procedure TfrmPrincipal.ckEmpresa_AutoIncClick(Sender: TObject);
begin
   if ckEmpresa_AutoInc.Checked then
      pEmpresaCod.Enabled := False
      else
         pEmpresaCod.Enabled := True;
end;

procedure TfrmPrincipal.ckMostraSenhaClick(Sender: TObject);
begin
   if ckMostraSenha.Checked then
      edtSenha.PasswordChar := #0
      else
         edtSenha.PasswordChar := '*';
end;

procedure TfrmPrincipal.ckSocio_AutoIncClick(Sender: TObject);
begin
   if ckSocio_AutoInc.Checked then
      pSocioMatricula.Enabled := False
      else
         pSocioMatricula.Enabled := True;
end;

procedure TfrmPrincipal.edtBDClick(Sender: TObject);
begin
   if edtBD.ReadOnly then
      begin
         Application.MessageBox('Favor desconectar do banco para para fazer a alteração.', 'Banco Conectado', MB_ICONEXCLAMATION);
         btnDesconectar.SetFocus;
         Exit;
      end;
end;

procedure TfrmPrincipal.edtSenhaClick(Sender: TObject);
begin
   if edtSenha.ReadOnly then
      begin
         Application.MessageBox('Favor desconectar do banco para para fazer a alteração.', 'Banco Conectado', MB_ICONEXCLAMATION);
         btnDesconectar.SetFocus;
         Exit;
      end;
end;

procedure TfrmPrincipal.edtServerClick(Sender: TObject);
begin
   if edtServer.ReadOnly then
      begin
         Application.MessageBox('Favor desconectar do banco para para fazer a alteração.', 'Banco Conectado', MB_ICONEXCLAMATION);
         btnDesconectar.SetFocus;
         Exit;
      end;
end;

procedure TfrmPrincipal.edtUsuarioClick(Sender: TObject);
begin
   if edtUsuario.ReadOnly then
      begin
         Application.MessageBox('Favor desconectar do banco para para fazer a alteração.', 'Banco Conectado', MB_ICONEXCLAMATION);
         btnDesconectar.SetFocus;
         Exit;
      end;   
end;

procedure TfrmPrincipal.IBCConnection1AfterConnect(Sender: TObject);
begin
   lblStatus.Caption      := 'Conectado';
   lblStatus.Font.Color   := clGreen;
   edtServer.ReadOnly     := True;
   edtBD.ReadOnly         := True;
   edtUsuario.ReadOnly    := True;
   edtSenha.ReadOnly      := True;
   ckMostraSenha.Enabled  := False;
end;

procedure TfrmPrincipal.IBCConnection1AfterDisconnect(Sender: TObject);
begin
   lblStatus.Caption     := 'Desconectado';
   lblStatus.Font.Color  := clMaroon;
   edtServer.ReadOnly     := False;
   edtBD.ReadOnly         := False;
   edtUsuario.ReadOnly    := False;
   edtSenha.ReadOnly      := False;
   ckMostraSenha.Enabled  := True;
end;

procedure TfrmPrincipal.sDependentesAfterPost(DataSet: TDataSet);
begin
   sDependentes.ApplyUpdates;
end;

procedure TfrmPrincipal.sEmpresasAfterPost(DataSet: TDataSet);
begin
   sEmpresas.ApplyUpdates;
end;

procedure TfrmPrincipal.sSocioAfterPost(DataSet: TDataSet);
begin
   sSocio.ApplyUpdates;
end;

procedure TfrmPrincipal.ImportaCampo(Tabela : TIBCQuery; Edit : TLabeledEdit; Campo : String; Edit2 : TLabeledEdit = nil);
var
   Valor, Valor2 : String;
Begin
   if (Edit.Text <> '') then
      Begin
         if Copy(Edit.Text,1,2)='V:' then
            Valor := Copy(Edit.Text,3,Length(Edit.Text)-2)
         else
            Begin
               Valor := aFields[StrToInt(edit.Text)];

               if (Assigned(Edit2)) and (Edit2.Text <> '') then
                  Begin
                     Valor2 := aFields[StrToInt(edit2.Text)];

                     if Trim(Valor2) <> ''  then
                        Valor := Valor + ' ' + Valor2;
                  End;

            End;

         if Trim(Valor) = '' then
            Exit;

         case Tabela.FieldByName(Campo).DataType of
            ftString : Tabela.FieldByName(Campo).asString := Valor;
            ftInteger, ftSmallint, ftShortint : Tabela.FieldByName(Campo).asInteger := StrToInt(Valor);
            ftFloat : Tabela.FieldByName(Campo).AsFloat := StrToFloat(StringReplace(Valor,'.','',[rfReplaceAll, rfIgnoreCase]));
            ftCurrency : Tabela.FieldByName(Campo).AsCurrency := StrToCurr(StringReplace(Valor,'.','',[rfReplaceAll, rfIgnoreCase]));
            ftDate : Tabela.FieldByName(Campo).AsDateTime := StrToDate(Valor);
            ftTime : Tabela.FieldByName(Campo).AsDateTime := StrToTime(Valor);
            ftDateTime, ftTimeStamp : Tabela.FieldByName(Campo).AsDateTime := StrToDateTime(Valor);
         else
            Tabela.FieldByName(Campo).asString := Valor;
         end;
      End;

End;

procedure TfrmPrincipal.IniciaProc;
Begin
   PbProgresso.Position := 0;
   PbProgresso.Max := sTabela.Count-1;
   PnProgresso.Show;
   memErros.Lines.Clear;
   tabErros.Caption := 'Erros (0)';
End;

procedure TfrmPrincipal.FimProc;
Begin
   PnProgresso.Hide;
   MessageBox(0, 'Importação concluida!', '', MB_ICONASTERISK or MB_OK);

   if tabErros.Caption <> 'Erros (0)' then
      PageControl1.ActivePage := tabErros;
End;

procedure TfrmPrincipal.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   IBCConnection1.Close;
end;

procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
//   PageControl1.ActivePage := TabSocios;
end;

procedure TfrmPrincipal.FormKeyPress(Sender: TObject; var Key: Char);
begin
   if (Key = #13) then
      begin
         Perform (CM_DialogKey, VK_TAB, 0);
         key:=#0;
      end;
end;

procedure TfrmPrincipal.IncErros(Linha, Codigo, Descricao, Erro : String);
Begin
   memErros.Lines.Add('Linha: '+Linha+'  Cod.: '+Codigo+'  Nome: '+Descricao+'  Erro: '+Erro);
   tabErros.Caption := 'Erros ('+memErros.Lines.Count.ToString+')';
End;

end.
